<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>机器学习——从最小二乘法开始</title>
      <link href="/2021/07/31/math-hw6-ML/"/>
      <url>/2021/07/31/math-hw6-ML/</url>
      
        <content type="html"><![CDATA[<h1 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>结合Matlab环境的contour函数研究二元函数的等值线变化规律: </p><p>平面上任取四个点 $x_1$ , $x_2$ , $x_3$ , $x_4$ ,研究含有参数的二元函数 $f(x)=\sum^{4}_ {i=1}{\theta_ {i}e^{-\gamma||x-x_i||^2}}$ 等值线的变化规律，其中 $\theta_i$ 为实数，$\gamma$ 为正实数</p><ul><li>至少要考虑相邻两点对应的 $\theta_i$ 同号和异号的情况</li><li>各个参数变化等值线的变化规律</li><li>突出0等值线</li><li>总结出一般规律推广到多于4个点</li></ul><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>初值:</p><pre class=" language-matlab"><code class="language-matlab">p <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">% 按四个象限的顺序编号</span>theta <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>gamma <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">;</span>X <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">0.01</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">;</span>Y <span class="token operator">=</span> X<span class="token punctuation">;</span></code></pre><ol><li>theta变化</li></ol><p>左右相邻点同号 <code>theta = [1 1 -1 -1]</code></p><p><img src="/2021/07/31/math-hw6-ML/p1.png" alt="图1"></p><p>上下相邻点同号 <code>theta = [1 1 -1 -1]</code></p><p><img src="/2021/07/31/math-hw6-ML/p2.png" alt="图2"></p><p>相邻点异号 <code>theta = [1 -1 1 -1]</code></p><p><img src="/2021/07/31/math-hw6-ML/p3.png" alt="图3"></p><ol start="2"><li>gamma变化</li></ol><p><code>gamma = 5</code></p><p><img src="/2021/07/31/math-hw6-ML/p4.png" alt="图4"></p><p><code>gamma = 0.1</code></p><p><img src="/2021/07/31/math-hw6-ML/p5.png" alt="图5"></p><ol start="3"><li>多于四个点</li></ol><p>取第五个点 $(0, 0)$ 与 $\theta_5=1$</p><p><img src="/2021/07/31/math-hw6-ML/p6.png" alt="图6"></p><ul><li>总结：该二元函数可以用于按 $\theta$ 的正负分类平面上的点集</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-matlab"><code class="language-matlab">clc<span class="token punctuation">,</span> clearp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>theta <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>gamma <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">;</span>X <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">0.01</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">;</span>Y <span class="token operator">=</span> X<span class="token punctuation">;</span>n <span class="token operator">=</span> <span class="token function">length</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">;</span>global mm <span class="token operator">=</span> <span class="token function">length</span><span class="token punctuation">(</span>theta<span class="token punctuation">)</span><span class="token punctuation">;</span>Z <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span>n    <span class="token keyword">for</span> <span class="token number">j</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span>n        <span class="token function">Z</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span> <span class="token number">j</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token function">X</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Y</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token punctuation">,</span> theta<span class="token punctuation">,</span> gamma<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token punctuation">[</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">meshgrid</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">contour</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> Z<span class="token punctuation">,</span> <span class="token string">'ShowText'</span><span class="token punctuation">,</span> <span class="token string">'on'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">% ShowText显示每条等值线的数值</span>colorbar  <span class="token comment" spellcheck="true">% 将数值与色度图对应图例显示在右侧</span>hold on<span class="token keyword">for</span> <span class="token number">i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span>m    <span class="token function">plot</span><span class="token punctuation">(</span><span class="token function">p</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">)</span><span class="token keyword">end</span>hold off<span class="token keyword">function</span> z <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> theta<span class="token punctuation">,</span> gamma<span class="token punctuation">,</span> p<span class="token punctuation">)</span>    z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    global m    <span class="token keyword">for</span> <span class="token number">i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span>m        z <span class="token operator">=</span> z <span class="token operator">+</span> <span class="token function">theta</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span>gamma <span class="token operator">.*</span> <span class="token function">norm</span><span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span> <span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token keyword">end</span></code></pre><h1 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>使用 $f(x)=\sum_ {i}{\theta_ {i}e^{-\gamma||x-x_ i||^2}}$ 作为分类器，用最小二乘法确定参数，分开不同颜色的数据</p><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><ol><li>数据生成</li></ol><pre class=" language-matlab"><code class="language-matlab">clc<span class="token punctuation">,</span> clearn <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>p1 <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1 <span class="token operator">=</span> <span class="token punctuation">[</span>p1<span class="token punctuation">;</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">ones</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>p2 <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ones</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>p2 <span class="token operator">=</span> <span class="token punctuation">[</span>p2<span class="token punctuation">;</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token function">ones</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>hold on<span class="token function">plot</span><span class="token punctuation">(</span><span class="token function">p1</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">p1</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'ob'</span><span class="token punctuation">)</span><span class="token function">p1</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token function">ones</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">plot</span><span class="token punctuation">(</span><span class="token function">p2</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">p2</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'or'</span><span class="token punctuation">)</span><span class="token function">p2</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">ones</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p <span class="token operator">=</span> <span class="token punctuation">[</span>p1 <span class="token punctuation">,</span>p2<span class="token punctuation">]</span><span class="token punctuation">;</span>hold off</code></pre><p><img src="/2021/07/31/math-hw6-ML/t2p1.png" alt="图7"></p><ol start="2"><li>分类</li></ol><pre class=" language-matlab"><code class="language-matlab"><span class="token comment" spellcheck="true">% 非线性最小二乘法</span>clcfun <span class="token operator">=</span> <span class="token operator">@</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token function">f_lsq</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>global mm <span class="token operator">=</span> <span class="token function">length</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>x0 <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>x <span class="token operator">=</span> <span class="token function">lsqnonlin</span><span class="token punctuation">(</span>fun<span class="token punctuation">,</span> x0<span class="token punctuation">)</span><span class="token punctuation">;</span>gamma <span class="token operator">=</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token keyword">end</span><span class="token punctuation">)</span><span class="token punctuation">;</span>theta <span class="token operator">=</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token keyword">end</span><span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>X <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">0.01</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">;</span>Y <span class="token operator">=</span> X<span class="token punctuation">;</span>Z <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token function">length</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">length</span><span class="token punctuation">(</span>Y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span><span class="token function">length</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token number">j</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span><span class="token function">length</span><span class="token punctuation">(</span>Y<span class="token punctuation">)</span>        <span class="token function">Z</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token function">X</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token function">Y</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> theta <span class="token punctuation">,</span> gamma<span class="token punctuation">,</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token punctuation">[</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">meshgrid</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">contour</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> Z<span class="token punctuation">,</span> <span class="token string">'ShowText'</span><span class="token punctuation">,</span> <span class="token string">'on'</span><span class="token punctuation">)</span>colorbarhold on<span class="token keyword">for</span> <span class="token number">i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span>m    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">p</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>        opt <span class="token operator">=</span> "ob"<span class="token punctuation">;</span>    <span class="token keyword">else</span>        opt <span class="token operator">=</span> "or"<span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token function">plot</span><span class="token punctuation">(</span><span class="token function">p</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> opt<span class="token punctuation">)</span><span class="token keyword">end</span>hold off<span class="token keyword">function</span> z <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> theta<span class="token punctuation">,</span> gamma<span class="token punctuation">,</span> p<span class="token punctuation">)</span>    z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    global m    <span class="token keyword">for</span> <span class="token number">i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span>m        z <span class="token operator">=</span> z <span class="token operator">+</span> <span class="token function">theta</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span>gamma <span class="token operator">.*</span> <span class="token function">norm</span><span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span> <span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token keyword">end</span><span class="token keyword">function</span> z <span class="token operator">=</span> <span class="token function">f_lsq</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> p<span class="token punctuation">)</span>    gamma <span class="token operator">=</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token keyword">end</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    theta <span class="token operator">=</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token keyword">end</span><span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    global m    z <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token number">i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span>m        <span class="token function">z</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token function">p</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> theta<span class="token punctuation">,</span> gamma<span class="token punctuation">,</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">end</span></code></pre><p><img src="/2021/07/31/math-hw6-ML/t2ans.png" alt="图8"></p><h1 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h1><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>矩阵完备化的最小二乘法：</p><ol><li><p>用随机方法生成一个较大的低秩矩阵，然后随机去掉里面大部分元素，再用最小二乘法恢复，比较前后异同</p></li><li><p>选择一张灰度图像，加入一些噪声，使用最小二乘法尝试恢复原图片</p></li></ol><h2 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h2><ol><li>生成低秩矩阵</li></ol><pre class=" language-matlab"><code class="language-matlab">A <span class="token operator">=</span>    <span class="token number">47</span>    <span class="token number">51</span>    <span class="token number">89</span>    <span class="token number">57</span>    <span class="token number">49</span>    <span class="token number">75</span>    <span class="token number">74</span>    <span class="token number">79</span>    <span class="token number">73</span>    <span class="token number">67</span>    <span class="token number">27</span>    <span class="token number">36</span>    <span class="token number">69</span>    <span class="token number">39</span>    <span class="token number">42</span>    <span class="token number">48</span>    <span class="token number">72</span>    <span class="token number">57</span>    <span class="token number">54</span>    <span class="token number">51</span>    <span class="token number">54</span>    <span class="token number">57</span>    <span class="token number">98</span>    <span class="token number">64</span>    <span class="token number">53</span>    <span class="token number">85</span>    <span class="token number">78</span>    <span class="token number">88</span>    <span class="token number">81</span>    <span class="token number">74</span>    <span class="token number">58</span>    <span class="token number">54</span>    <span class="token number">86</span>    <span class="token number">62</span>    <span class="token number">42</span>    <span class="token number">86</span>    <span class="token number">52</span>    <span class="token number">82</span>    <span class="token number">74</span>    <span class="token number">66</span>    <span class="token number">33</span>    <span class="token number">39</span>    <span class="token number">71</span>    <span class="token number">43</span>    <span class="token number">41</span>    <span class="token number">55</span>    <span class="token number">66</span>    <span class="token number">61</span>    <span class="token number">57</span>    <span class="token number">53</span>    <span class="token number">66</span>    <span class="token number">63</span>   <span class="token number">102</span>    <span class="token number">72</span>    <span class="token number">51</span>    <span class="token number">99</span>    <span class="token number">66</span>    <span class="token number">96</span>    <span class="token number">87</span>    <span class="token number">78</span>    <span class="token number">52</span>    <span class="token number">66</span>   <span class="token number">124</span>    <span class="token number">72</span>    <span class="token number">74</span>    <span class="token number">90</span>   <span class="token number">124</span>   <span class="token number">104</span>    <span class="token number">98</span>    <span class="token number">92</span>    <span class="token number">52</span>    <span class="token number">51</span>    <span class="token number">84</span>    <span class="token number">58</span>    <span class="token number">43</span>    <span class="token number">79</span>    <span class="token number">58</span>    <span class="token number">78</span>    <span class="token number">71</span>    <span class="token number">64</span>    <span class="token number">11</span>    <span class="token number">18</span>    <span class="token number">37</span>    <span class="token number">19</span>    <span class="token number">24</span>    <span class="token number">22</span>    <span class="token number">44</span>    <span class="token number">29</span>    <span class="token number">28</span>    <span class="token number">27</span>    <span class="token number">74</span>    <span class="token number">72</span>   <span class="token number">118</span>    <span class="token number">82</span>    <span class="token number">60</span>   <span class="token number">112</span>    <span class="token number">80</span>   <span class="token number">110</span>   <span class="token number">100</span>    <span class="token number">90</span><span class="token comment" spellcheck="true">% 生成30个噪点</span>a <span class="token operator">=</span>   Inf    <span class="token number">51</span>    <span class="token number">89</span>    <span class="token number">57</span>    <span class="token number">49</span>    <span class="token number">75</span>    <span class="token number">74</span>    <span class="token number">79</span>    <span class="token number">73</span>    <span class="token number">67</span>    <span class="token number">27</span>   Inf   Inf    <span class="token number">39</span>    <span class="token number">42</span>    <span class="token number">48</span>   Inf   Inf   Inf    <span class="token number">51</span>    <span class="token number">54</span>    <span class="token number">57</span>    <span class="token number">98</span>    <span class="token number">64</span>    <span class="token number">53</span>    <span class="token number">85</span>    <span class="token number">78</span>    <span class="token number">88</span>    <span class="token number">81</span>   Inf   Inf   Inf    <span class="token number">86</span>   Inf    <span class="token number">42</span>    <span class="token number">86</span>    <span class="token number">52</span>    <span class="token number">82</span>    <span class="token number">74</span>   Inf    <span class="token number">33</span>    <span class="token number">39</span>    <span class="token number">71</span>   Inf    <span class="token number">41</span>   Inf    <span class="token number">66</span>   Inf    <span class="token number">57</span>   Inf    <span class="token number">66</span>    <span class="token number">63</span>   <span class="token number">102</span>    <span class="token number">72</span>   Inf   Inf    <span class="token number">66</span>    <span class="token number">96</span>    <span class="token number">87</span>    <span class="token number">78</span>    <span class="token number">52</span>    <span class="token number">66</span>   Inf   Inf    <span class="token number">74</span>    <span class="token number">90</span>   <span class="token number">124</span>   <span class="token number">104</span>   Inf   Inf    <span class="token number">52</span>    <span class="token number">51</span>   Inf    <span class="token number">58</span>    <span class="token number">43</span>    <span class="token number">79</span>    <span class="token number">58</span>   Inf   Inf   Inf   Inf   Inf    <span class="token number">37</span>   Inf    <span class="token number">24</span>    <span class="token number">22</span>   Inf    <span class="token number">29</span>    <span class="token number">28</span>    <span class="token number">27</span>    <span class="token number">74</span>    <span class="token number">72</span>   <span class="token number">118</span>    <span class="token number">82</span>    <span class="token number">60</span>   <span class="token number">112</span>    <span class="token number">80</span>   <span class="token number">110</span>   Inf    <span class="token number">90</span></code></pre><ol start="2"><li>复原</li></ol><pre class=" language-matlab"><code class="language-matlab">a <span class="token operator">=</span>    <span class="token number">47</span>    <span class="token number">51</span>    <span class="token number">89</span>    <span class="token number">57</span>    <span class="token number">49</span>    <span class="token number">75</span>    <span class="token number">74</span>    <span class="token number">79</span>    <span class="token number">73</span>    <span class="token number">67</span>    <span class="token number">27</span>    <span class="token number">35</span>    <span class="token number">66</span>    <span class="token number">39</span>    <span class="token number">42</span>    <span class="token number">48</span>    <span class="token number">65</span>    <span class="token number">55</span>    <span class="token number">53</span>    <span class="token number">51</span>    <span class="token number">54</span>    <span class="token number">57</span>    <span class="token number">98</span>    <span class="token number">64</span>    <span class="token number">53</span>    <span class="token number">85</span>    <span class="token number">78</span>    <span class="token number">88</span>    <span class="token number">81</span>    <span class="token number">75</span>    <span class="token number">58</span>    <span class="token number">54</span>    <span class="token number">86</span>    <span class="token number">60</span>    <span class="token number">42</span>    <span class="token number">86</span>    <span class="token number">52</span>    <span class="token number">82</span>    <span class="token number">74</span>    <span class="token number">66</span>    <span class="token number">33</span>    <span class="token number">39</span>    <span class="token number">71</span>    <span class="token number">45</span>    <span class="token number">41</span>    <span class="token number">55</span>    <span class="token number">66</span>    <span class="token number">61</span>    <span class="token number">57</span>    <span class="token number">54</span>    <span class="token number">66</span>    <span class="token number">63</span>   <span class="token number">102</span>    <span class="token number">72</span>    <span class="token number">52</span>    <span class="token number">99</span>    <span class="token number">66</span>    <span class="token number">96</span>    <span class="token number">87</span>    <span class="token number">78</span>    <span class="token number">52</span>    <span class="token number">66</span>   <span class="token number">124</span>    <span class="token number">78</span>    <span class="token number">74</span>    <span class="token number">90</span>   <span class="token number">124</span>   <span class="token number">104</span>   <span class="token number">101</span>    <span class="token number">94</span>    <span class="token number">52</span>    <span class="token number">51</span>    <span class="token number">84</span>    <span class="token number">58</span>    <span class="token number">43</span>    <span class="token number">79</span>    <span class="token number">58</span>    <span class="token number">78</span>    <span class="token number">71</span>    <span class="token number">64</span>    <span class="token number">12</span>    <span class="token number">18</span>    <span class="token number">37</span>    <span class="token number">22</span>    <span class="token number">24</span>    <span class="token number">22</span>    <span class="token number">40</span>    <span class="token number">29</span>    <span class="token number">28</span>    <span class="token number">27</span>    <span class="token number">74</span>    <span class="token number">72</span>   <span class="token number">118</span>    <span class="token number">82</span>    <span class="token number">60</span>   <span class="token number">112</span>    <span class="token number">80</span>   <span class="token number">110</span>    <span class="token number">99</span>    <span class="token number">90</span>残差平方和<span class="token operator">:</span> <span class="token number">151</span></code></pre><ol start="3"><li>灰度图加噪声</li></ol><p><img src="/2021/07/31/math-hw6-ML/s1.png"><br><img src="/2021/07/31/math-hw6-ML/s2.png"><br><img src="/2021/07/31/math-hw6-ML/s3.png"></p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><pre class=" language-matlab"><code class="language-matlab"><span class="token comment" spellcheck="true">%% 低秩矩阵生成</span>clc<span class="token punctuation">,</span> clearn <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>B <span class="token operator">=</span> <span class="token function">randi</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>C <span class="token operator">=</span> <span class="token function">randi</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>A <span class="token operator">=</span> B <span class="token operator">*</span> C<span class="token punctuation">;</span>a <span class="token operator">=</span> A<span class="token punctuation">;</span>m <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>id <span class="token operator">=</span> <span class="token function">randperm</span><span class="token punctuation">(</span>n <span class="token operator">*</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">inf</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">%% 图片加噪音</span>rgb <span class="token operator">=</span> <span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">'Lenna.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>rgb <span class="token operator">=</span> <span class="token function">imresize</span><span class="token punctuation">(</span>rgb<span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token string">'nearest'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>A <span class="token operator">=</span> <span class="token function">rgb2gray</span><span class="token punctuation">(</span>rgb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">disp</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'原图秩：'</span><span class="token punctuation">,</span> <span class="token function">num2str</span><span class="token punctuation">(</span><span class="token function">rank</span><span class="token punctuation">(</span><span class="token function">double</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span>n <span class="token punctuation">,</span> m<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">;</span>p <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">% 噪点数量</span>id <span class="token operator">=</span> <span class="token function">randperm</span><span class="token punctuation">(</span>n <span class="token operator">*</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>a <span class="token operator">=</span> A<span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">inf</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token function">double</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">imshow</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">%%</span>clc<span class="token comment" spellcheck="true">% A为nxm，B为nxr, C为rxm</span>r <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">% 假设秩为5</span>a <span class="token operator">=</span> <span class="token function">double</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>A <span class="token operator">=</span> <span class="token function">double</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">;</span>x0 <span class="token operator">=</span> <span class="token function">randi</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> n<span class="token operator">+</span>m<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">% 非线性最小二乘法</span>fun <span class="token operator">=</span> <span class="token operator">@</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token function">fmatrix</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">% x = lsqnonlin(fun, x0);</span>A_Recover <span class="token operator">=</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span>n<span class="token punctuation">,</span> <span class="token operator">:</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">x</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span>n<span class="token operator">+</span>m<span class="token punctuation">,</span> <span class="token operator">:</span><span class="token punctuation">)</span><span class="token operator">'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">A_Recover</span><span class="token punctuation">(</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">imshow</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> y <span class="token operator">=</span> <span class="token function">fmatrix</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> a<span class="token punctuation">)</span>y <span class="token operator">=</span> a <span class="token operator">-</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span>n<span class="token punctuation">,</span> <span class="token operator">:</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">x</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span>n<span class="token operator">+</span>m<span class="token punctuation">,</span> <span class="token operator">:</span><span class="token punctuation">)</span><span class="token operator">'</span><span class="token punctuation">;</span><span class="token function">y</span><span class="token punctuation">(</span>y <span class="token operator">==</span> <span class="token keyword">inf</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">end</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> matlab </tag>
            
            <tag> 数学建模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>循环比赛的名次</title>
      <link href="/2021/07/19/%E5%BE%AA%E7%8E%AF%E6%AF%94%E8%B5%9B%E5%90%8D%E6%AC%A1/"/>
      <url>/2021/07/19/%E5%BE%AA%E7%8E%AF%E6%AF%94%E8%B5%9B%E5%90%8D%E6%AC%A1/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="./循环比赛名次.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代数 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿狸的打字机</title>
      <link href="/2021/07/18/%E9%98%BF%E7%8B%B8%E7%9A%84%E6%89%93%E5%AD%97%E6%9C%BA/"/>
      <url>/2021/07/18/%E9%98%BF%E7%8B%B8%E7%9A%84%E6%89%93%E5%AD%97%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><ul><li><a href="https://www.luogu.com.cn/problem/P2414">https://www.luogu.com.cn/problem/P2414</a></li></ul><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><ul><li><p>原题意简化为：询问 $x$ 串在 $y$ 串中的出现次数，多组询问</p></li><li><p>输入多个串的方式构成一棵 $trie$ 树，加入一个字符相当于从当前节点往下走一层，$P$ 标记当前节点为一个串的结尾 $B$ 返回父亲节点。不只应用于 $trie$ 树，这种输入 $dfs$ 序方法建树的套路，遇到不止一次了</p></li><li><p>$trie$ 树已经建好，又是字符串匹配问题，自然想到建出 $AC$ 自动机</p></li><li><p>考虑 $fail$ 树的意义：父亲节点必然是儿子节点的一个极大后缀（$kmp$ 失配数组同理）</p></li><li><p>那么对于 $y$ 串，我们一个个字符添加。如果加入一个字符后，$x$ 刚好出现，说明 $x$ 是 $y$ 的一个后缀。那么 $x$ 必然是 $y$ 在 $fail$ 树上的一个祖先。（不一定是极大后缀，不一定是父亲）</p></li><li><p>问题转化为，从根到 $y$ 结尾，对应在 $tire$ 树上的每个节点，有多少个节点能直接或间接地，通过爬 $fail$ 树，达到 $x$ 末尾节点。考虑用数据结构维护</p></li><li><p>考虑逆问题，在 $x$ 的 $fail$ 子树内，有多少个结点是 $y$ 串在 $trie$ 树的节点</p></li><li><p>我们知道子树问题可以转化为区间问题，对于节点 $x$，我们询问在 $fail$ 树上，入栈序和出栈序的区间 $[in[x], out[x]]$</p></li><li><p>在线处理询问，破坏了已经建成的 $trie$ 树的顺序和完整性，重复插入字符时间空间无法接受，考虑离线处理，按建 $trie$ 树每个串出现的顺序排序。算法呼之欲出了</p></li></ul><ol><li>建出 $trie$、$fail$ 树，遍历 $fail$ 树得 $dfs$ 序</li><li>对询问按 $y$ 从小到大排序</li><li>再次按输入顺序遍历 $trie$ 树，进入、退出一个节点在 $fail$ 树上对应 $dfs$ 序节点 $+1$、$-1$</li><li>遇到 $P$，处理对当前 $y$ 的所有询问，用树状数组统计每个 $x$ 在 $fail$ 树上的子树和</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>$AC$ 自动机的中难题，需要有非常深入的理解，理清楚 $fail$ 树、$trie$ 树之间的关系。并想到询问离线处理，有一定数据结构基础</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">2e5</span> <span class="token operator">+</span> <span class="token number">50</span><span class="token punctuation">;</span><span class="token keyword">int</span> len<span class="token punctuation">,</span> ans<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> in<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> out<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> dfn<span class="token punctuation">;</span><span class="token keyword">struct</span> Graph<span class="token punctuation">{</span>    <span class="token keyword">int</span> etop<span class="token punctuation">,</span> head<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">Graph</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">memset</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">struct</span> Edge    <span class="token punctuation">{</span>        <span class="token keyword">int</span> v<span class="token punctuation">,</span> nxt<span class="token punctuation">;</span>    <span class="token punctuation">}</span>e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        e<span class="token punctuation">[</span><span class="token operator">++</span>etop<span class="token punctuation">]</span><span class="token punctuation">.</span>v <span class="token operator">=</span> v<span class="token punctuation">;</span>        e<span class="token punctuation">[</span>etop<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>        head<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> etop<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        in<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>dfn<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">~</span>i<span class="token punctuation">;</span> i <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token punctuation">)</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> dfn<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>G<span class="token punctuation">;</span><span class="token keyword">namespace</span> BIT<span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> pos<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> dfn<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> i <span class="token operator">&amp;</span> <span class="token operator">-</span>i<span class="token punctuation">)</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> pos<span class="token punctuation">;</span> i<span class="token punctuation">;</span> i <span class="token operator">-</span><span class="token operator">=</span> i <span class="token operator">&amp;</span> <span class="token operator">-</span>i<span class="token punctuation">)</span>            ret <span class="token operator">+</span><span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">query</span><span class="token punctuation">(</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">struct</span> Query<span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> id<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token keyword">int</span> _id<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        id <span class="token operator">=</span> _id<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> Query <span class="token operator">&amp;</span>t<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> y <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>y<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>ask<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> AC<span class="token punctuation">{</span>    <span class="token keyword">int</span> ch<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">,</span> top<span class="token punctuation">,</span> fa<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> fail<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> num<span class="token punctuation">,</span> pos<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">trie</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> u <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'P'</span><span class="token punctuation">)</span>                pos<span class="token punctuation">[</span><span class="token operator">++</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'B'</span><span class="token punctuation">)</span>                u <span class="token operator">=</span> fa<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                v <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ch<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span>                    ch<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>top<span class="token punctuation">;</span>                fa<span class="token punctuation">[</span>ch<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span>                u <span class="token operator">=</span> ch<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        queue <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                G<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> ch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> u <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                v <span class="token operator">=</span> ch<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    fail<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> ch<span class="token punctuation">[</span>fail<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>                    G<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>fail<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> ch<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> ch<span class="token punctuation">[</span>fail<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        G<span class="token punctuation">.</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> u <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'B'</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                BIT<span class="token operator">::</span><span class="token function">add</span><span class="token punctuation">(</span>in<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                u <span class="token operator">=</span> fa<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'P'</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token operator">++</span>cnt<span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>ask<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">==</span> cnt<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">int</span> x <span class="token operator">=</span> pos<span class="token punctuation">[</span>ask<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>                    ans<span class="token punctuation">[</span>ask<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> BIT<span class="token operator">::</span><span class="token function">query</span><span class="token punctuation">(</span>in<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> out<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">++</span>k<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>             <span class="token punctuation">{</span>                u <span class="token operator">=</span> ch<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                BIT<span class="token operator">::</span><span class="token function">add</span><span class="token punctuation">(</span>in<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">char</span> s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    AC<span class="token operator">::</span><span class="token function">trie</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    AC<span class="token operator">::</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        ask<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">input</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>ask <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> ask <span class="token operator">+</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    AC<span class="token operator">::</span><span class="token function">work</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AC自动机 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
